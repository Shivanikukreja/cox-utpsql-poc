parameters:
  - name: enableDatabaseBuild
    type: boolean
    default: true
  - name: containerRegistry
    default: "utPLSQL-docker"
  - name: dockerRepo
    default: "utplsqlv3/oracledb"
  - name: utplsqlVersion
    default: ""
  - name: utplsqlDir
    default: ""
  - name: addToPaths
    type: object
    default:
      - name: path
        default: ""        
  - name: targetDatabases
    type: object
    default:
      - name: oracleVersion
        default: ""  
      - name: dockerOptions
        type: string
        default: "--shm-size=1g"
      - name: dockerPortMap
        type: string
        default: "1521"
      - name: connectionString
        default: ""        
      - name: scripts
        type: object
        default:
          - name: work_dir
            default: ""
          - name: user
            default: ""
          - name: password
            default: ""
          - name: script
            default: ""
          - name: displayName
            default: ""


stages:
  - ${{ if parameters.enableDatabaseBuild }}:
    - stage: DatabaseBuildAndTest
      pool:
        vmImage: ubuntu-latest
      jobs:
        - template: t-extend-download-binaries.yml
          parameters:
            packages:
              - name: sqlcl
                download_location: "$(Build.BinariesDirectory)/sqlcl-latest.zip"
                unpack_location: "$(Build.BinariesDirectory)"
                url: "https://download.oracle.com/otn_software/java/sqldeveloper/sqlcl-latest.zip"
                archive: "zip"
        
              - name: utlplsqlcli
                download_location: "$(Build.BinariesDirectory)/utPLSQL-cli.zip"
                unpack_location: "$(Build.BinariesDirectory)"
                url: "https://github.com/utPLSQL/utPLSQL-cli/releases/download/$(UTPLSQL_CLI_VERSION)/utPLSQL-cli.zip"
                archive: "zip"          
        - job: CreateDatabase
          displayName: Create Database
          steps:
            - checkout: self
            - ${{ each addpath in parameters.addToPaths }}:
                - bash: |    
                    echo "Setting variable ${{addpath.path}}"
                    echo "##vso[task.prependpath]${{addpath.path}}"
                    ls -ltr ${{addpath.path}}
                    echo $PATH

                    ls -ltr $(Build.BinariesDirectory)
                  displayName: 'Add To path ${{addpath.path}}'

            - bash: |
                git clone --depth=1 --branch=${{ parameters.utplsqlVersion }} https://github.com/utPLSQL/utPLSQL.git ${{ parameters.utplsqlDir}}
                chmod -R go+w ${{ parameters.utplsqlDir}}
              displayName: 'Download utPLSQL'

            - task: Docker@2
              displayName: Docker Login
              inputs:
                containerRegistry: ${{ parameters.containerRegistry }}
                command: 'login'
                addPipelineData: false
                addBaseImageData: false
                
            - ${{ each trg_db in parameters.targetDatabases }}:
              - bash: |
                  # download Oracle Database docker image from private repo and start the DB
                  time docker pull ${{ parameters.dockerRepo }}:${{ trg_db.oracleVersion }}
                  # start the docker container (DB)
                  time docker run -d --name ${{ trg_db.oracleVersion }} ${{ trg_db.dockerOptions }} -p 1521:${{ trg_db.dockerPortMap }} ${{ parameters.dockerRepo }}:${{ trg_db.oracleVersion }}
                  # Wait for DB startup
                  time docker logs -f ${{ trg_db.oracleVersion }} | grep -m 1 "DATABASE IS READY TO USE!" --line-buffered
                displayName: 'Start Oracle DB Docker container: ${{ trg_db.oracleVersion }}'
                
              - ${{ each script in trg_db.scripts }}:
                - template: t-extend-sqlcl.yml
                  parameters:
                    work_dir: ${{ script.work_dir}}
                    user: ${{ script.user}}
                    password: ${{ script.password}}
                    connectionString: ${{ trg_db.connectionString}}
                    script: ${{ script.script}}
                    displayName: ${{ script.displayName}}
